#!/usr/bin/env sh

set -x -e

monitor_info() {
    xrandr --query | awk '
    / connected / {
        monitor = $1;
        for (i = 2; i <= NF; i++) {
            if ($i ~ /^[0-9]+x[0-9]+\+[0-9]+\+[0-9]+$/) {
                split($i, dims, /[x+]/);
                width = dims[1];
                height = dims[2];
                gcd = 1
                for(j=width;j>1;j--) {
                    if(width % j == 0 && height % j == 0) {
                        gcd = j;
                        break;
                    }
                }
                num = width/gcd;
                denom = height/gcd;
                if (num == 8 && denom == 5) {
                    num *= 2;
                    denom *= 2;
                }

                aspectRatio = num "x" denom;
                offsetX = dims[3];
                offsetY = dims[4];
                print aspectRatio " " offsetX " " offsetY " " width " " height;
                break;
            }
        }
    }' | sort -k3,3
}

create_lock_image() {
    total_width=0
    total_height=0
    canvas=$(mktemp --suffix=".jpg")
    monitor_info_f=$(mktemp)
    monitor_info >$monitor_info_f
    while IFS=' ' read -r _aspect offsetX offsetY width height; do
        calc_width=$((offsetX + width))
        calc_height=$((offsetY + height))
        if [ $calc_width -gt $total_width ]; then
            total_width=$calc_width
        fi
        if [ $calc_height -gt $total_height ]; then
            total_height=$calc_height
        fi
    done <$monitor_info_f
    magick -size "${total_width}x${total_height}" xc:white $canvas
    while IFS=' ' read -r aspect offsetX offsetY width height; do
        wallpaper_path="$HOME/img/lib/lock/${aspect}.jpg"
        magick $canvas \( "$wallpaper_path" -resize "${width}x${height}!" \) -geometry +"${offsetX}+${offsetY}" -composite $canvas
    done <$monitor_info_f

    echo $canvas | tee /dev/stderr
}

trap_notifications() {
	pkill -u "$USER" -USR1 dunst
}

untrap_notifications() {
	pkill -u "$USER" -USR2 dunst
}

lock() {
	lock_image="$1"
	trap_notifications
	i3lock -n -i "$lock_image" \
		--inside-color="00000000" \
		--ring-color="00000033" \
		--separator-color="00000000" \
		--insidever-color="00000000" \
		--insidewrong-color="ff000033" \
		--keyhl-color="ffffff77" \
		--bshl-color="ffffff77" \
		--ringver-color="00000000" \
		--ringwrong-color="00000000" \
		--greeter-color="00000000" \
		--line-color="00000000" \
		--verif-text="" \
		--wrong-text="" \
		--noinput-text="" \
		--pass-media-keys \
		--pass-screen-keys \
		--pass-volume-keys \
		--pass-power-keys  &
    lock_pid=$!
    while kill -0 "$lock_pid" 2>/dev/null; do
        if fprintd-verify; then
            kill "$lock_pid"
        fi
        sleep 1
    done
    pgrep fprintd-verify | while read -r pid; do kill "$pid"; done
	untrap_notifications
}

lock "$(create_lock_image)"
