#!/usr/bin/env python3

import subprocess
import re

monitor_config = {
    "docked": {
        "eDP-1": {"mode": "1920x1200", "pos": "0x0", "rotate": "normal", "primary": True},
        "DP-1-2": {"mode": "1920x1200", "pos": "1920x0", "rotate": "normal"},
        "DP-1-3": {"mode": "1920x1200", "pos": "3840x0", "rotate": "left"}
    }
}

def apply_config(config_name) -> None
    for config_name in monitor_config[config_name]:
        config = monitor_config.get(monitor)
        if config:
            cmd += ['--output', monitor]
            if 'primary' in config and config['primary']:
                cmd += ['--primary']
            cmd += ['--mode', config['mode'], '--pos', config['pos'], '--rotate', config['rotate']]
        else:
            cmd += ['--output', monitor, '--off']

def get_monitors() -> str:
    result = subprocess.run(["xrandr", "--query"], stdout=subprocess.PIPE)
    output = result.stdout.decode("utf-8")
    monitors = [line.split()[0] for line in output.splitlines() if " connected" in line]
    return " ".join(sorted(monitors))

def configure_monitors() -> None:
    monitors = get_monitors();
    triple_pattern = r"DP-\d+-2 DP-\d+-3 eDP-1"
    dual_pattern = r"HDMI-\d+-2 eDP-1"
    single_pattern = r"eDP-1"

    if re.match(triple_pattern, monitors):
        print("Triple monitor configuration detected.")
        # Commands to setup three monitors (placeholder)
        # You can use subprocess to run xrandr commands
    elif re.match(dual_pattern, monitors):
        print("Dual monitor configuration detected.")
        # Commands to setup two monitors (placeholder)
    elif re.match(single_pattern, monitors):
        print("Single monitor configuration detected.")
        # Commands to setup one monitor (placeholder)
    else:
        print("Unknown monitor configuration:", monitors)
        # Fallback or error handling

if __name__ == "__main__":
    configure_monitors()
